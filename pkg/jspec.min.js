
(function(){var JSpec={version:'0.8.0',main:this,suites:{},matchers:{},stats:{specs:0,assertions:0,failures:0,passes:0},options:{profile:false},defaultContext:{sandbox:function(name){sandbox=document.createElement('div')
sandbox.setAttribute('class','jspec-sandbox')
document.body.appendChild(sandbox)
return sandbox}},Matcher:function(name,matcher,actual,expected,negate){self=this
this.name=name
this.message=''
this.passed=false
if(typeof matcher=='string'){if(matcher.match(/^alias (\w+)/))matcher=JSpec.matchers[matcher.match(/^alias (\w+)/)[1]]
if(matcher.length<4)body='actual '+matcher+' expected'
else body=matcher
matcher={match:function(actual,expected){return eval(body)}}}
function generateMessage(){return'expected '+print(actual)+' to '+(negate?' not ':'')+name.replace(/_/g,' ')+' '+print(expected)}
function setMessage(){if(typeof matcher.message=='function')
self.message=matcher.message(actual,expected,negate)
else
self.message=generateMessage()}
function pass(){setMessage()
JSpec.stats.passes+=1
self.passed=true}
function fail(){setMessage()
JSpec.stats.failures+=1}
this.match=function(){args=expected==null?[]:expected
args.unshift(actual==null?null:actual.valueOf())
return matcher.match.apply(JSpec,args)}
this.passes=function(){this.result=this.match()
return negate?!this.result:this.result}
this.exec=function(){this.passes()?pass():fail()
return this}},formatters:{DOM:function(results,options){markup=''
id=options.reportToId||'jspec'
report=document.getElementById(id)
if(!report)error('requires the element #'+id+' to output its reports')
markup+='<div id="jspec-report"><div class="heading">                                   \
        <span class="passes">Passes: <em>'+results.stats.passes+'</em></span>       \
        <span class="failures">Failures: <em>'+results.stats.failures+'</em></span> \
        </div><table class="suites">'
results.each(results.suites,function(description,suite){if(suite.ran){markup+='<tr class="description"><td colspan="2">'+description+'</td></tr>'
results.each(suite.specs,function(i,spec){markup+='<tr class="'+(i%2?'odd':'even')+'">'
assertionCount=spec.assertions.length+' assertion(s)'
if(spec.requiresImplementation()){markup+='<td class="requires-implementation" colspan="2">'+spec.description+'</td>'}
else if(spec.passed()){markup+='<td class="pass">'+spec.description+'</td><td>'+assertionCount+'</td>'}
else{markup+='<td class="fail">'+spec.description+' <em>'+spec.failure().message+'</em>'+'</td><td>'+assertionCount+'</td>'}})
markup+='</tr>'}})
markup+='</table></div>'
report.innerHTML=markup},Console:function(results,options){console.log('')
console.log('Passes: '+results.stats.passes+' Failures: '+results.stats.failures)
results.each(results.suites,function(description,suite){if(suite.ran){console.group(description)
results.each(suite.specs,function(spec){assertionCount=spec.assertions.length+':'
if(spec.requiresImplementation()){console.warn(spec.description)}
else if(spec.passed()){console.log(assertionCount+' '+spec.description)}
else{console.error(assertionCount+' '+spec.description+', '+spec.failure().message)}})
console.groupEnd()}})}},Suite:function(description){this.specs=[],this.hooks={}
this.description=description,this.ran=false
this.addSpec=function(spec){this.specs.push(spec)
spec.suite=this}
this.hook=function(hook){if(body=this.hooks[hook])
JSpec.evalBody(body,"Error in hook '"+hook+"', suite '"+this.description+"': ")}},Spec:function(description,body){this.body=body,this.description=description,this.assertions=[]
this.failure=function(){var failure
JSpec.each(this.assertions,function(assertion){if(!assertion.passed&&!failure)failure=assertion})
return failure}
this.passed=function(){return!this.failure()}
this.requiresImplementation=function(){return this.assertions.length==0}},hash:function(object){b=''
each(object,function(key,value){if(value.constructor==Array||value.constructor==Object)b+=hash(value)
else b+=key.toString()+value.toString()})
return b},last:function(array){return array[array.length-1]},print:function(object){if(object==undefined)return''
else if(object==null)return'null'
else if(object.jquery&&object.selector.length>0)return"selector '"+object.selector+"'"
switch(object.constructor){case Array:return'['+object+']';break
case String:return"'"+object+"'";break
default:return object}},match:function(actual,negate,name,expected){if(typeof negate=='string')negate=negate=='should'?false:true
matcher=new JSpec.Matcher(name,this.matchers[name],actual,[expected],negate)
JSpec.currentSpec.assertions.push(matcher.exec())
return matcher.result},each:function(object,callback){for(key in object){if(typeof object[key]=='function')continue
if(callback.length==1)
callback.call(JSpec,object[key])
else
callback.call(JSpec,key,object[key])}
return JSpec},addMatchers:function(matchers){each(matchers,function(name,body){this.matchers[name]=body})
return JSpec},evalBody:function(body,errorMessage){try{runner=function(){eval(JSpec.preProcessBody(body))}
runner.call(this.context||this.defaultContext)}
catch(e){error(errorMessage,e)}},preProcessBody:function(body){body=body.replace('-{','function(){')
body=body.replace(/(\d+)\.\.(\d+)/g,function(_,a,b){return range(a,b)})
body=body.replace(/^ *\./gm,'this.')
body=body.replace(/\.should_(\w+)(?: |$)(.*)$/gm,'.should_$1($2)')
body=body.replace(/(.+?)\.(should(?:_not)?)_(\w+)\((.*)\)$/gm,'JSpec.match($1, "$2", "$3", $4)')
body=body.replace(/, \)$/gm,')')
return body},range:function(start,end){s=parseInt(start),e=parseInt(end),b='['+s
if(e>s)while(++s<=e)b+=','+s
else while(--s>=e)b+=','+s
return b+']'},parse:function(input){var describing,specing,capturing,commenting
var token,describe,spec,capture,body=[]
tokens=this.tokenize(input)
while(tokens.length){token=tokens.shift()
if(commenting&&token!="\n"&&!specing&&!capturing)continue
switch(token){case'end':if(describing)this.suites[describe]=this.suites[describe]||new JSpec.Suite(describe)
if(specing){newSpec=new JSpec.Spec(spec,body.join(''))
this.suites[describe].addSpec(newSpec)
body=[],spec=specing=null}
else if(capturing){if(describing)this.suites[describe].hooks[capture]=body.join('')
body=[],capturing=capture=null}
else if(describing){describing=describe=null}
break
case'before':case'after':case'before_each':case'after_each':capturing=true;break
case"\n":commenting=false;break
case'//':commenting=true;break
case'describe':describing=true;break
case'it':specing=true;break
case'__END__':return this;break}
if(spec||capture){body.push(token)}
else{if(capturing)capture=token
if(/'.*?'/.test(token)){if(specing)spec=token.replace(/'/g,'')
else if(describing)describe=token.replace(/'/g,'')}}}
return this},tokenize:function(input){if(input.constructor==Array)return input
regexp=/(?:__END__|end|before_each|after_each|before|after|it|describe|'.*?')(?= |\n|$)|\/\/|\n|./gm
return input.match(regexp)},report:function(options){this.formatter?new JSpec.formatter(this,options||{}):new JSpec.formatters.DOM(this,options||{})
return this},run:function(){if(this.options.profile)console.group('Profile')
each(this.suites,function(suite){this.runSuite(suite)})
if(this.options.profile)console.groupEnd()
return this},runSuite:function(suite){if(typeof suite=='string')suite=this.suites[suite]
suite.ran=true
suite.hook('before')
each(suite.specs,function(spec){suite.hook('before_each')
this.runSpec(spec)
suite.hook('after_each')})
suite.hook('after')
return this},runSpec:function(spec){this.currentSpec=spec
this.stats.specs++
if(this.options.profile)console.time(spec.description)
this.evalBody(spec.body,"Error in spec '"+spec.description+"': ")
if(this.options.profile)console.timeEnd(spec.description)
this.stats.assertions+=spec.assertions.length},requires:function(dependency,message){try{eval(dependency)}
catch(e){error('depends on '+dependency+' '+(message||''))}},error:function(message,error){throw'jspec: '+message+(error?error.message+'; in '+error.fileName+' on line '+error.lineNumber:'')},eval:function(input){return this.parse(input)},load:function(file){if('XMLHttpRequest'in this.main){request=new XMLHttpRequest
request.open('GET',file,false)
request.send(null)
if(request.readyState==4)
return request.responseText}
else if('load'in this.main){load(file)}
else{error('cannot load '+file)}},exec:function(file){return this.eval(this.load(file))}}
last=JSpec.last
range=JSpec.range
each=JSpec.each
error=JSpec.error
print=JSpec.print
hash=JSpec.hash
addMatchers=JSpec.addMatchers
addMatchers({be:"alias eql",equal:"===",be_greater_than:">",be_less_than:"<",be_at_least:">=",be_at_most:"<=",be_a:"actual.constructor == expected",be_an:"alias be_a",be_null:"actual == null",be_empty:"actual.length == 0",be_true:"actual == true",be_false:"actual == false",be_type:"typeof actual == expected",match:"typeof actual == 'string' ? actual.match(expected) : false",respond_to:"typeof actual[expected] == 'function'",have_length:"actual.length == expected",be_within:"actual >= expected[0] && actual <= last(expected)",have_length_within:"actual.length >= expected[0] && actual.length <= last(expected)",eql:{match:function(actual,expected){if(actual.constructor==Array||actual.constructor==Object)return hash(actual)==hash(expected)
else return actual==expected}},include:{match:function(actual,expected){if(typeof actual=='string')return actual.match(expected)
else return expected in actual}},throw_error:{match:function(actual,expected){try{actual()}
catch(e){return true}}}})
this.JSpec=JSpec})();