!!!
%html
  %head
    %title JSpec - JavaScript Testing Framework
    %link{ :rel => 'stylesheet', :href => 'style.css' }
    %link{ :rel => 'stylesheet', :href => 'lightr.css' }
    %script{ :src => 'javascripts/jquery.js' }
    %script{ :src => 'javascripts/app.js' }
  %body
    %a{ :href => PROJECT_URL }
      %img#ribbon{ :src => 'http://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png', :alt => 'Fork me on GitHub' }

  #container
    #download
      %a{ :href => PROJECT_URL + '/downloads' }
        %img{ :src => 'http://github.com/images/modules/download/zip.png' }
      %a{ :href => PROJECT_URL + '/downloads'  }
        %img{ :src => 'http://github.com/images/modules/download/tar.png' }
    
    = title 'JSpec', 'JavaScript Testing Framework'

    %p
      JSpec is a extremely small, yet very powerful testing framework. Utilizing its own custom grammar and
      pre-processor, JSpec can operate in ways that no other JavaScript testing framework can. This includes
      many helpful shorthand literals, a very intuitive / readable syntax, as well as not polluting core
      object prototypes.

    %p
      JSpec can also be run in a variety of ways, such as via the terminal with Rhino support, via browsers
      using the DOM or Console formatters, or finally by using the Ruby JavaScript testing framework which
      runs browsers in the background, reporting back to the terminal.

    %div#features
      %h2 Features
      
      %ul
        %li Allows parens to be optional when using matchers to increase readability
        %li Assertion graphs displaying how many, and which assertions passed or failed
        %li Async support
        %li Fixture support
        %li Modular extensibility via Modules and hooks.
        %li Cascading before/after/before_each/after_each hooks
        %li Default / customizable evaluation contexts
        %li Does not pollute core object prototypes or global scope
        %li DOM sandbox support
        %li Extremely simple and intuitive matcher declaration
        %li Framework / DOM independent
        %li Grammar-less option (for those who dislike JSpec's syntax)
        %li Great looking default DOM theme
        %li Highly readable custom grammar
        %li Nested describes
        %li Optionally display failures only, speeding up development
        %li Over 45 core matchers
        %li Profiling
        %li Proxy assertion or 'spy' support
        %li Method Stubbing
        %li Rhino support
        %li Ruby JavaScript testing server
        %li Several helpful formatters (dom, console, terminal, ...)
        %li Shared behaviors
        %li Ruby on Rails Integration
        %li Tiny (15 kb compressed, 1600-ish LOC)
        %li `jspec` command-line utility for auto-running specs, and initializing project templates


    %div#example
      %h2 Example
      
      %code.highlight= highlight example('basic')
      
      %h2 DOM Formatter
      %p The DOM formatter is the default of JSpec, featuring assertion graphs and a sleek white style.
      %img{ :src => 'http://img396.imageshack.us/img396/8868/jspecdom.png', :alt => 'JSpec DOM Formatter', :class => 'rounded' }

    %div#matchers
      %h2 Matchers
      
      %pre#matcher-example Click a matcher below to view an example
      
      %div.left
        %h3 Core
        %ul.matchers
          %li be
          %li eql
          %li equal          
          %li be_a    
          %li be_an    
          %li be_an_instance_of
          %li be_at_least    
          %li be_at_most     
          %li be_within      
          %li be_null        
          %li be_undefined 
          %li be_empty       
          %li be_true        
          %li be_false       
          %li be_type        
          %li be_greater_than
          %li be_less_than   
          %li have           
          %li have_at_least  
          %li have_at_most   
          %li have_within    
          %li have_length  
          %li have_prop
          %li have_property  
          %li include        
          %li match
          %li throw_error
          %li respond_to     

      %div.right
        %h3 jQuery
        %ul.matchers
          %li have_tag      
          %li have_one      
          %li have_tags 
          %li have_many 
          %li have_child           
          %li have_children        
          %li have_text            
          %li have_attr            
          %li have_value     
          %li have_class
          %li have_classes
          %li be_visible
          %li be_hidden
          %li be_enabled
          %li be_disabled
          %li be_selected
          %li be_checked
          %li have_type
          %li have_id
          %li have_title
          %li have_alt
          %li have_href
          %li have_src
          %li have_rel
          %li have_rev
          %li have_name
          %li have_target
      
      %div.clear

    %h2 JSpec Executable
    %p The packaged JSpec executable allows you to quickly initialize project templates which utilize JSpec, update them with the lateast versions of JSpec, as well as auto-run suites in multiple browsers when a file is altered. For information beyond the examples below consult `jspec help`.

    %pre.small= example('jspec-init')
    %pre.small= example('jspec-update')
    %pre.small= example('jspec-bind')

    %h2 Proxy Assertions or 'Spies'
    %p JSpec's support for proxy assertions allows you to assert that a method is invoked a specific number of times, with specific arguments, returning specific results. In the example below, we assert that <strong>getDogs()</strong> calls <strong>getPets()</strong> with a string of <strong>'dogs'</strong>, and returns an array of dogs. All these assertions must pass in order for the spec to pass.

    %pre.small= example('receive')

    %p The example below will fail, due to the method being called only once with a string.

    %pre.small= example('receive-fail')
    
    %h2 Extending JSpec With Modules
    %p JSpec's Modules take the form of a simple JavaScript object or 'hash', allowing you to add matchers
    define dependencies, add utility functions, implement hook callbacks and more. Below is an example module
    taken from core to add jQuery support. Consult the README for additional information.
    
    %pre.small= example('module-jquery', true)
    
    %h2 Module Hooks
    %p Hooks are called throughout JSpec's execution to provide modles with a chance to alter, or act upon 
    what is currently being processed. For example to add range support to JSpec we can simply implement a 
    hook callback for the 'preprocessing' hook:
    
    %p This implementation would allow '0..5' to be expanded to '[0,1,2,3,4,5]'
    %pre.small= example('module-hook-preprocessing')

    %div#more-information
      %h2 More Information
      
      %ul
        %li
          Get the
          %a{ :href => 'http://github.com/visionmedia/jspec.tmbundle/tree/master' } TextMate bundle
      
        %li 
          View the
          %a{ :href => PROJECT_URL } Readme
          for more documentation

        %li 
          Report bugs or feature requests at 
          %a{ :href => 'http://visionmedia.lighthouseapp.com/projects/27644-jspec/overview' } Lighthouse
          
        %li
          %a{ :href => 'rails.html' } Rails / JSpec Integration
          
        %li
          %a{ :href => 'http://www.jsmag.com/main.issues.description/id=21/' } Featured JSpec Article in JSMag

    %h2 Authors

    %p 
      TJ Holowaychuk 
      %a{ :href => 'http://vision-media.ca' } (tj@vision-media.ca)

    .footer
      this mini site brought to you by : 
      %a{ :href => project_url('visionmedia', 'mini') } visionmedia/mini