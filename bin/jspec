#!/usr/bin/env ruby

require 'rubygems'
require 'commander'
require 'fileutils'

JSPEC_ROOT = File.expand_path(File.join(File.dirname(__FILE__), '..'))

program :name, 'JSpec'
program :version, '1.0.1'
program :description, 'JavaScript BDD Testing Framework'
default_command :bind

command :init do |c|
  c.syntax = 'jspec init [dest] [options]'
  c.summary = 'Initialize a JSpec project template'
  c.description = 'Initialize a JSpec project template. Defaults to the current directory when <dest> is not specified.'
  c.example 'Create a directory foo, initialized with a jspec template', 'jspec init foo'
  c.when_called do |args, options|
    dest = args.shift || '.'
    unless Dir[dest + '/*'].empty?
      abort unless agree "'#{dest}' is not empty; continue? "
    end
    FileUtils.mkdir_p dest
    FileUtils.cp_r File.join(JSPEC_ROOT, 'templates', 'default', '.'), dest
    spec = File.join dest, 'spec', 'spec.html'
    contents = File.read spec
    File.open(spec, 'w') { |file| file.write contents.gsub('JSPEC_ROOT', JSPEC_ROOT) }
    say "Template initialized at '#{dest}'."
  end
end

command :run do |c|
  c.syntax = 'jspec run [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '-b', '--browsers BROWSERS', Array, 'Specify browsers to test, defaults to Safari'
  c.option '-p', '--paths PATHS', Array, 'Specify paths when binding, defaults to js within ./lib and ./spec'
  c.option '-B', '--bind', 'Auto-run tests when source files or specs are altered'
  c.when_called do |args, options|
    require 'bind'
    options.default :browsers => %w( Safari ), :paths => ['lib/**/*.js', 'spec/**/*.js']
    action = Bind::Actions::RefreshBrowsers.new 'spec/spec.html', *options.browsers
    listener = Bind::Listener.new :paths => options.paths, :interval => 1, :actions => [action], :debug => $stdout
    listener.run!
  end
end
alias_command :bind, :run, '--bind'
